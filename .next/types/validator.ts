// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../src/app/(protected)/admin/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin">> = Specific
  const handler = {} as typeof import("../../src/app/(protected)/admin/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(protected)/blog/[slug]/edit/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/blog/[slug]/edit">> = Specific
  const handler = {} as typeof import("../../src/app/(protected)/blog/[slug]/edit/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(protected)/feed/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/feed">> = Specific
  const handler = {} as typeof import("../../src/app/(protected)/feed/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(protected)/postblog/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/postblog">> = Specific
  const handler = {} as typeof import("../../src/app/(protected)/postblog/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(public)/[username]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[username]">> = Specific
  const handler = {} as typeof import("../../src/app/(public)/[username]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(public)/about/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/about">> = Specific
  const handler = {} as typeof import("../../src/app/(public)/about/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(public)/blog/[slug]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/blog/[slug]">> = Specific
  const handler = {} as typeof import("../../src/app/(public)/blog/[slug]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(public)/contactus/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/contactus">> = Specific
  const handler = {} as typeof import("../../src/app/(public)/contactus/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(public)/home/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/home">> = Specific
  const handler = {} as typeof import("../../src/app/(public)/home/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/dashboard/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard">> = Specific
  const handler = {} as typeof import("../../src/app/dashboard/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/notification/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/notification">> = Specific
  const handler = {} as typeof import("../../src/app/notification/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/profile/[id]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/profile/[id]">> = Specific
  const handler = {} as typeof import("../../src/app/profile/[id]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/profile/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/profile">> = Specific
  const handler = {} as typeof import("../../src/app/profile/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/search/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/search">> = Specific
  const handler = {} as typeof import("../../src/app/search/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/settings/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/settings">> = Specific
  const handler = {} as typeof import("../../src/app/settings/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/users/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/users">> = Specific
  const handler = {} as typeof import("../../src/app/users/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/auth/[...nextauth]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/auth/[...nextauth]">> = Specific
  const handler = {} as typeof import("../../src/app/api/auth/[...nextauth]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/blogs/[slug]/comments/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/blogs/[slug]/comments">> = Specific
  const handler = {} as typeof import("../../src/app/api/blogs/[slug]/comments/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/blogs/[slug]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/blogs/[slug]">> = Specific
  const handler = {} as typeof import("../../src/app/api/blogs/[slug]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/blogs/feed/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/blogs/feed">> = Specific
  const handler = {} as typeof import("../../src/app/api/blogs/feed/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/blogs/published/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/blogs/published">> = Specific
  const handler = {} as typeof import("../../src/app/api/blogs/published/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/blogs/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/blogs">> = Specific
  const handler = {} as typeof import("../../src/app/api/blogs/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/blogs/search/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/blogs/search">> = Specific
  const handler = {} as typeof import("../../src/app/api/blogs/search/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/blogs/unpublished/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/blogs/unpublished">> = Specific
  const handler = {} as typeof import("../../src/app/api/blogs/unpublished/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/blogs/user/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/blogs/user/[id]">> = Specific
  const handler = {} as typeof import("../../src/app/api/blogs/user/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/comments/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/comments">> = Specific
  const handler = {} as typeof import("../../src/app/api/comments/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/contact/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/contact">> = Specific
  const handler = {} as typeof import("../../src/app/api/contact/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/posts/[slug]/comments/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/posts/[slug]/comments">> = Specific
  const handler = {} as typeof import("../../src/app/api/posts/[slug]/comments/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/posts/[slug]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/posts/[slug]">> = Specific
  const handler = {} as typeof import("../../src/app/api/posts/[slug]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/posts/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/posts">> = Specific
  const handler = {} as typeof import("../../src/app/api/posts/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/users/follow/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/users/follow">> = Specific
  const handler = {} as typeof import("../../src/app/api/users/follow/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/users/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/users">> = Specific
  const handler = {} as typeof import("../../src/app/api/users/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/users/unfollow/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/users/unfollow">> = Specific
  const handler = {} as typeof import("../../src/app/api/users/unfollow/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}





// Validate ../../src/app/(protected)/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/(protected)/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(public)/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/(public)/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
