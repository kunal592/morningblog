{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":["file:///home/user/morningblog/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["\nimport NextAuth from \"next-auth\";\nimport { PrismaAdapter } from \"@auth/prisma-adapter\";\nimport { PrismaClient } from \"@prisma/client\";\nimport GoogleProvider from \"next-auth/providers/google\";\n\nconst prisma = new PrismaClient();\n\nif (!process.env.GOOGLE_CLIENT_ID || !process.env.GOOGLE_CLIENT_SECRET) {\n  throw new Error(\"Missing GOOGLE_CLIENT_ID or GOOGLE_CLIENT_SECRET\");\n}\n\nexport const authOptions = {\n  adapter: PrismaAdapter(prisma),\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n    }),\n  ],\n  secret: process.env.NEXTAUTH_SECRET,\n  session: {\n    strategy: \"database\",\n  },\n  callbacks: {\n    session({ session, user }: any) {\n      if (session.user) {\n        session.user.id = user.id;\n      }\n      return session;\n    },\n  },\n};\n\nconst handler = NextAuth(authOptions);\n\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;;;;;AACA;AACA;AACA;AACA;;;;;AAEA,MAAM,SAAS,IAAI,6IAAY;AAE/B,IAAI,CAAC,QAAQ,GAAG,CAAC,gBAAgB,IAAI,CAAC,QAAQ,GAAG,CAAC,oBAAoB,EAAE;IACtE,MAAM,IAAI,MAAM;AAClB;AAEO,MAAM,cAAc;IACzB,SAAS,IAAA,uKAAa,EAAC;IACvB,WAAW;QACT,IAAA,gKAAc,EAAC;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAChD;KACD;IACD,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACnC,SAAS;QACP,UAAU;IACZ;IACA,WAAW;QACT,SAAQ,EAAE,OAAO,EAAE,IAAI,EAAO;YAC5B,IAAI,QAAQ,IAAI,EAAE;gBAChB,QAAQ,IAAI,CAAC,EAAE,GAAG,KAAK,EAAE;YAC3B;YACA,OAAO;QACT;IACF;AACF;AAEA,MAAM,UAAU,IAAA,kJAAQ,EAAC","debugId":null}}]
}